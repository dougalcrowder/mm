(()=>{var t={5315:t=>{var e;window,e=function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var i,r=n(1),o=(i=r)&&i.__esModule?i:{default:i};t.exports=o.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=a(n(2)),s=a(n(3));function a(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return n.name="FadeTheme",n.options=i({},{mainElement:"#swup"},t),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"mount",value:function(){this.applyStyles(s.default),this.addClassName(this.options.mainElement,"main")}}]),e}(o.default);e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=function(){function t(){var e=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._addedStyleElements=[],this._addedHTMLContent=[],this._classNameAddedToElements=[],this._addClassNameToElement=function(){e._classNameAddedToElements.forEach((function(t){Array.prototype.slice.call(document.querySelectorAll(t.selector)).forEach((function(e){e.classList.add("swup-transition-"+t.name)}))}))},this.isSwupPlugin=!0}return i(t,[{key:"_beforeMount",value:function(){this._originalAnimationSelectorOption=String(this.swup.options.animationSelector),this.swup.options.animationSelector='[class*="swup-transition-"]',this.swup.on("contentReplaced",this._addClassNameToElement)}},{key:"_afterUnmount",value:function(){this.swup.options.animationSelector=this._originalAnimationSelectorOption,this._addedStyleElements.forEach((function(t){t.outerHTML="",t=null})),this._addedHTMLContent.forEach((function(t){t.outerHTML="",t=null})),this._classNameAddedToElements.forEach((function(t){Array.prototype.slice.call(document.querySelectorAll(t.selector)).forEach((function(t){t.className.split(" ").forEach((function(e){new RegExp("^swup-transition-").test(e)&&t.classList.remove(e)}))}))})),this.swup.off("contentReplaced",this._addClassNameToElement)}},{key:"mount",value:function(){}},{key:"unmount",value:function(){}},{key:"applyStyles",value:function(t){var e=document.head,n=document.createElement("style");n.setAttribute("data-swup-theme",""),n.appendChild(document.createTextNode(t)),this._addedStyleElements.push(n),e.prepend(n)}},{key:"applyHTML",value:function(t){var e=document.createElement("div");e.innerHTML=t,this._addedHTMLContent.push(e),document.body.appendChild(e)}},{key:"addClassName",value:function(t,e){this._classNameAddedToElements.push({selector:t,name:e}),this._addClassNameToElement()}}]),t}();e.default=r},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,".swup-transition-main {\n    opacity: 1;\n    transition: opacity .4s;\n}\n\nhtml.is-animating .swup-transition-main {\n    opacity: 0;\n}",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n,i=t[1]||"",r=t[3];if(!r)return i;if(e&&"function"==typeof btoa){var o=(n=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),s=r.sources.map((function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"}));return[i].concat(s).concat([o]).join("\n")}return[i].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},r=0;r<this.length;r++){var o=this[r][0];null!=o&&(i[o]=!0)}for(r=0;r<t.length;r++){var s=t[r];null!=s[0]&&i[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}}])},t.exports=e()},6078:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();var i=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e instanceof Element||e instanceof SVGElement?this.link=e:(this.link=document.createElement("a"),this.link.href=e)}return n(t,[{key:"getPath",value:function(){var t=this.link.pathname;return"/"!==t[0]&&(t="/"+t),t}},{key:"getAddress",value:function(){var t=this.link.pathname+this.link.search;return this.link.getAttribute("xlink:href")&&(t=this.link.getAttribute("xlink:href")),"/"!==t[0]&&(t="/"+t),t}},{key:"getHash",value:function(){return this.link.hash}}]),t}();e.default=i},3688:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t){var e=t.toString().toLowerCase().replace(/\s+/g,"-").replace(/\//g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"");return"/"===e[0]&&(e=e.splice(1)),""===e&&(e="homepage"),e}},1526:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(){document.documentElement.className.split(" ").forEach((function(t){(new RegExp("^to-").test(t)||"is-changing"===t||"is-rendering"===t||"is-popstate"===t)&&document.documentElement.classList.remove(t)}))}},341:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t){window.history.pushState({url:t||window.location.href.split(window.location.hostname)[1],random:Math.random(),source:"swup"},document.title,t||window.location.href.split(window.location.hostname)[1])}},5828:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i={url:window.location.pathname+window.location.search,method:"GET",data:null,headers:{}},r=n({},i,t),o=new XMLHttpRequest;return o.onreadystatechange=function(){4===o.readyState&&(o.status,e(o))},o.open(r.method,r.url,!0),Object.keys(r.headers).forEach((function(t){o.setRequestHeader(t,r.headers[t])})),o.send(r.data),o}},7630:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(){return window.location.pathname+window.location.search}},7589:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(3132);e.default=function(t,e){var n=document.createElement("html");n.innerHTML=t;var r=[];e.forEach((function(t){if(null==(0,i.query)(t,n))return console.warn("[swup] Container "+t+" not found on page."),null;(0,i.queryAll)(t).length!==(0,i.queryAll)(t,n).length&&console.warn("[swup] Mismatched number of containers found on new page."),(0,i.queryAll)(t).forEach((function(e,o){(0,i.queryAll)(t,n)[o].setAttribute("data-swup",r.length),r.push((0,i.queryAll)(t,n)[o].outerHTML)}))}));var o={title:(n.querySelector("title")||{}).innerText,pageClass:n.querySelector("body").className,originalContent:t,blocks:r};return n.innerHTML="",n=null,o}},5932:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.cleanupAnimationClasses=e.Link=e.markSwupElements=e.normalizeUrl=e.getCurrentUrl=e.transitionProperty=e.transitionEnd=e.fetch=e.getDataFromHtml=e.createHistoryRecord=e.classify=void 0;var i=p(n(3688)),r=p(n(341)),o=p(n(7589)),s=p(n(5828)),a=p(n(2008)),u=p(n(6240)),l=p(n(7630)),c=p(n(4242)),d=p(n(8085)),h=p(n(6078)),f=p(n(1526));function p(t){return t&&t.__esModule?t:{default:t}}e.classify=i.default,e.createHistoryRecord=r.default,e.getDataFromHtml=o.default,e.fetch=s.default,e.transitionEnd=a.default,e.transitionProperty=u.default,e.getCurrentUrl=l.default,e.normalizeUrl=c.default,e.markSwupElements=d.default,e.Link=h.default,e.cleanupAnimationClasses=f.default},8085:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(3132);e.default=function(t,e){var n=0;e.forEach((function(e){null==(0,i.query)(e,t)?console.warn("[swup] Container "+e+" not found on page."):(0,i.queryAll)(e).forEach((function(r,o){(0,i.queryAll)(e,t)[o].setAttribute("data-swup",n),n++}))}))}},4242:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r=n(6078),o=(i=r)&&i.__esModule?i:{default:i};e.default=function(t){return new o.default(t).getAddress()}},2008:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(){return void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend?"webkitTransitionEnd":"transitionend"}},6240:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(){return void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend?"WebkitTransition":"transition"}},8434:(t,e,n)=>{"use strict";var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),o=w(n(6023)),s=w(n(5138)),a=w(n(9449)),u=w(n(5093)),l=w(n(3382)),c=w(n(6907)),d=w(n(4409)),h=w(n(5640)),f=w(n(5373)),p=w(n(1034)),m=w(n(3719)),g=n(5404),y=n(3132),v=n(5932);function w(t){return t&&t.__esModule?t:{default:t}}var _=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n={animateHistoryBrowsing:!1,animationSelector:'[class*="transition-"]',linkSelector:'a[href^="'+window.location.origin+'"]:not([data-no-swup]), a[href^="/"]:not([data-no-swup]), a[href^="#"]:not([data-no-swup])',cache:!0,containers:["#swup"],requestHeaders:{"X-Requested-With":"swup",Accept:"text/html, application/xhtml+xml"},plugins:[],skipPopStateHandling:function(t){return!(t.state&&"swup"===t.state.source)}},r=i({},n,e);this._handlers={animationInDone:[],animationInStart:[],animationOutDone:[],animationOutStart:[],animationSkipped:[],clickLink:[],contentReplaced:[],disabled:[],enabled:[],openPageInNewTab:[],pageLoaded:[],pageRetrievedFromCache:[],pageView:[],popState:[],samePage:[],samePageWithHash:[],serverError:[],transitionStart:[],transitionEnd:[],willReplaceContent:[]},this.scrollToElement=null,this.preloadPromise=null,this.options=r,this.plugins=[],this.transition={},this.delegatedListeners={},this.boundPopStateHandler=this.popStateHandler.bind(this),this.cache=new s.default,this.cache.swup=this,this.loadPage=a.default,this.renderPage=u.default,this.triggerEvent=l.default,this.on=c.default,this.off=d.default,this.updateTransition=h.default,this.getAnimationPromises=p.default,this.getPageData=m.default,this.getAnchorElement=f.default,this.log=function(){},this.use=g.use,this.unuse=g.unuse,this.findPlugin=g.findPlugin,this.getCurrentUrl=v.getCurrentUrl,this.cleanupAnimationClasses=v.cleanupAnimationClasses,this.enable()}return r(t,[{key:"enable",value:function(){var t=this;"undefined"!=typeof Promise?(this.delegatedListeners.click=(0,o.default)(document,this.options.linkSelector,"click",this.linkClickHandler.bind(this)),window.addEventListener("popstate",this.boundPopStateHandler),this.options.cache,(0,v.markSwupElements)(document.documentElement,this.options.containers),this.options.plugins.forEach((function(e){t.use(e)})),window.history.replaceState(Object.assign({},window.history.state,{url:window.location.href,random:Math.random(),source:"swup"}),document.title,window.location.href),this.triggerEvent("enabled"),document.documentElement.classList.add("swup-enabled"),this.triggerEvent("pageView")):console.warn("Promise is not supported")}},{key:"destroy",value:function(){var t=this;this.delegatedListeners.click.destroy(),window.removeEventListener("popstate",this.boundPopStateHandler),this.cache.empty(),this.options.plugins.forEach((function(e){t.unuse(e)})),(0,y.queryAll)("[data-swup]").forEach((function(t){t.removeAttribute("data-swup")})),this.off(),this.triggerEvent("disabled"),document.documentElement.classList.remove("swup-enabled")}},{key:"linkClickHandler",value:function(t){if(t.metaKey||t.ctrlKey||t.shiftKey||t.altKey)this.triggerEvent("openPageInNewTab",t);else if(0===t.button){this.triggerEvent("clickLink",t),t.preventDefault();var e=new v.Link(t.delegateTarget);if(e.getAddress()==(0,v.getCurrentUrl)()||""==e.getAddress()){if(""!=e.getHash())this.triggerEvent("samePageWithHash",t),null!=(0,f.default)(e.getHash())?history.replaceState({url:e.getAddress()+e.getHash(),random:Math.random(),source:"swup"},document.title,e.getAddress()+e.getHash()):console.warn("Element for offset not found ("+e.getHash()+")");else this.triggerEvent("samePage",t)}else{""!=e.getHash()&&(this.scrollToElement=e.getHash());var n=t.delegateTarget.getAttribute("data-swup-transition");this.loadPage({url:e.getAddress(),customTransition:n},!1)}}}},{key:"popStateHandler",value:function(t){if(!this.options.skipPopStateHandling(t)){var e=new v.Link(t.state?t.state.url:window.location.pathname);""!==e.getHash()?this.scrollToElement=e.getHash():t.preventDefault(),this.triggerEvent("popState",t),this.options.animateHistoryBrowsing||(document.documentElement.classList.remove("is-animating"),(0,v.cleanupAnimationClasses)()),this.loadPage({url:e.getAddress()},t)}}}]),t}();e.A=_},5138:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Cache=void 0;var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=n(5932);var o=e.Cache=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.pages={},this.last=null}return i(t,[{key:"cacheUrl",value:function(t){t.url=(0,r.normalizeUrl)(t.url),t.url in this.pages==!1&&(this.pages[t.url]=t),this.last=this.pages[t.url],this.swup.log("Cache ("+Object.keys(this.pages).length+")",this.pages)}},{key:"getPage",value:function(t){return t=(0,r.normalizeUrl)(t),this.pages[t]}},{key:"getCurrentPage",value:function(){return this.getPage((0,r.getCurrentUrl)())}},{key:"exists",value:function(t){return(t=(0,r.normalizeUrl)(t))in this.pages}},{key:"empty",value:function(){this.pages={},this.last=null,this.swup.log("Cache cleared")}},{key:"remove",value:function(t){delete this.pages[t]}}]),t}();e.default=o},5373:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(3132);e.default=function(t){return t?("#"===t.charAt(0)&&(t=t.substring(1)),t=decodeURIComponent(t),t=(0,i.escapeCssIdentifier)(t),(0,i.query)("#"+t)||(0,i.query)("a[name='"+t+"']")):null}},1034:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(3132),r=n(5932);e.default=function(){var t=this.options.animationSelector,e=(0,r.transitionProperty)()+"Duration",n=[],o=(0,i.queryAll)(t,document.body);return o.length?(o.forEach((function(i){var o=window.getComputedStyle(i)[e];if(!o||"0s"==o)return console.warn("[swup] No CSS transition duration defined for element of selector "+t),void n.push(Promise.resolve());var s=new Promise((function(t){i.addEventListener((0,r.transitionEnd)(),(function(e){i==e.target&&t()}))}));n.push(s)})),n):(console.warn("[swup] No animated elements found by selector "+t),[Promise.resolve()])}},3719:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(5932);e.default=function(t){var e=t.responseText,n=(0,i.getDataFromHtml)(e,this.options.containers);return n?(n.responseURL=t.responseURL?t.responseURL:window.location.href,n):(console.warn("[swup] Received page is invalid."),null)}},9449:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],i=!0,r=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){r=!0,o=t}finally{try{!i&&a.return&&a.return()}finally{if(r)throw o}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},o=n(5932);e.default=function(t,e){var n=this,s=[],a=void 0;this.triggerEvent("transitionStart",e),null!=t.customTransition?(this.updateTransition(window.location.pathname,t.url,t.customTransition),document.documentElement.classList.add("to-"+(0,o.classify)(t.customTransition))):this.updateTransition(window.location.pathname,t.url),!e||this.options.animateHistoryBrowsing?function(){if(n.triggerEvent("animationOutStart"),document.documentElement.classList.add("is-changing"),document.documentElement.classList.add("is-leaving"),document.documentElement.classList.add("is-animating"),e&&document.documentElement.classList.add("is-popstate"),document.documentElement.classList.add("to-"+(0,o.classify)(t.url)),s=n.getAnimationPromises("out"),Promise.all(s).then((function(){n.triggerEvent("animationOutDone")})),!e){var i=void 0;i=null!=n.scrollToElement?t.url+n.scrollToElement:t.url,(0,o.createHistoryRecord)(i)}}():this.triggerEvent("animationSkipped"),this.cache.exists(t.url)?(a=new Promise((function(e){e(n.cache.getPage(t.url))})),this.triggerEvent("pageRetrievedFromCache")):a=this.preloadPromise&&this.preloadPromise.route==t.url?this.preloadPromise:new Promise((function(e,i){(0,o.fetch)(r({},t,{headers:n.options.requestHeaders}),(function(r){if(500===r.status)return n.triggerEvent("serverError"),void i(t.url);var o=n.getPageData(r);null!=o&&o.blocks.length>0?(o.url=t.url,n.cache.cacheUrl(o),n.triggerEvent("pageLoaded"),e(o)):i(t.url)}))})),Promise.all([a].concat(s)).then((function(t){var r=i(t,1)[0];n.renderPage(r,e),n.preloadPromise=null})).catch((function(t){n.options.skipPopStateHandling=function(){return window.location=t,!0},window.history.go(-1)}))}},4409:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e){var n=this;if(null!=t)if(null!=e)if(this._handlers[t]&&this._handlers[t].filter((function(t){return t===e})).length){var i=this._handlers[t].filter((function(t){return t===e}))[0],r=this._handlers[t].indexOf(i);r>-1&&this._handlers[t].splice(r,1)}else console.warn("Handler for event '"+t+"' no found.");else this._handlers[t]=[];else Object.keys(this._handlers).forEach((function(t){n._handlers[t]=[]}))}},6907:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e){this._handlers[t]?this._handlers[t].push(e):console.warn("Unsupported event "+t+".")}},5404:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.use=function(t){if(t.isSwupPlugin)return this.plugins.push(t),t.swup=this,"function"==typeof t._beforeMount&&t._beforeMount(),t.mount(),this.plugins;console.warn("Not swup plugin instance "+t+".")},e.unuse=function(t){var e=void 0;if(e="string"==typeof t?this.plugins.find((function(e){return t===e.name})):t){e.unmount(),"function"==typeof e._afterUnmount&&e._afterUnmount();var n=this.plugins.indexOf(e);return this.plugins.splice(n,1),this.plugins}console.warn("No such plugin.")},e.findPlugin=function(t){return this.plugins.find((function(e){return t===e.name}))}},5093:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r=n(5932);e.default=function(t,e){var n=this;if(document.documentElement.classList.remove("is-leaving"),this.getCurrentUrl()===t.url){var o=new r.Link(t.responseURL).getPath();window.location.pathname!==o&&(window.history.replaceState({url:o,random:Math.random(),source:"swup"},document.title,o),this.cache.cacheUrl(i({},t,{url:o}))),e&&!this.options.animateHistoryBrowsing||document.documentElement.classList.add("is-rendering"),this.triggerEvent("willReplaceContent",e);for(var s=0;s<t.blocks.length;s++)document.body.querySelector('[data-swup="'+s+'"]').outerHTML=t.blocks[s];if(document.title=t.title,this.triggerEvent("contentReplaced",e),this.triggerEvent("pageView",e),this.options.cache||this.cache.empty(),setTimeout((function(){e&&!n.options.animateHistoryBrowsing||(n.triggerEvent("animationInStart"),document.documentElement.classList.remove("is-animating"))}),10),!e||this.options.animateHistoryBrowsing){var a=this.getAnimationPromises("in");Promise.all(a).then((function(){n.triggerEvent("animationInDone"),n.triggerEvent("transitionEnd",e),n.cleanupAnimationClasses()}))}else this.triggerEvent("transitionEnd",e);this.scrollToElement=null}}},3382:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e){this._handlers[t].forEach((function(t){try{t(e)}catch(t){console.error(t)}}));var n=new CustomEvent("swup:"+t,{detail:t});document.dispatchEvent(n)}},5640:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function(t,e,n){this.transition={from:t,to:e,custom:n}}},3132:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.query=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return"string"!=typeof t?t:e.querySelector(t)},e.queryAll=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return"string"!=typeof t?t:Array.prototype.slice.call(e.querySelectorAll(t))},e.escapeCssIdentifier=function(t){return window.CSS&&window.CSS.escape?CSS.escape(t):t}},6023:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>o});const i=new WeakMap;function r(t,e,n,r){var o,s;if(!t&&!i.has(e))return!1;const a=null!==(o=i.get(e))&&void 0!==o?o:new WeakMap;if(i.set(e,a),!t&&!i.has(e))return!1;const u=null!==(s=a.get(n))&&void 0!==s?s:new Set;a.set(n,u);const l=u.has(r);return t?u.add(r):u.delete(r),l&&t}const o=function t(e,n,i,o,s){if("string"==typeof e&&(e=document.querySelectorAll(e)),"function"!=typeof e.addEventListener){const r=Array.prototype.map.call(e,(e=>t(e,n,i,o,s)));return{destroy(){for(const t of r)t.destroy()}}}const a=e instanceof Document?e.documentElement:e,u=Boolean("object"==typeof s?s.capture:s),l=t=>{const e=function(t,e){let n=t.target;if(n instanceof Text&&(n=n.parentElement),n instanceof Element&&t.currentTarget instanceof Element){const i=n.closest(e);if(i&&t.currentTarget.contains(i))return i}}(t,n);e&&(t.delegateTarget=e,o.call(a,t))};"object"==typeof s&&delete s.once;const c=JSON.stringify({selector:n,type:i,capture:u}),d={destroy(){a.removeEventListener(i,l,s),r(!1,a,o,c)}};return r(!0,a,o,c)||a.addEventListener(i,l,s),d}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";var t=function(t){return this._sizes=[],this._columns=[],this._container=null,this._count=null,this._width=0,this._removeListener=null,this._currentGutterX=null,this._currentGutterY=null,this._resizeTimeout=null,this.conf={baseWidth:255,gutterX:null,gutterY:null,gutter:10,container:null,minify:!0,ultimateGutter:5,surroundingGutter:!0,direction:"ltr",wedge:!1},this.init(t),this};t.prototype.init=function(t){for(var e in this.conf)null!=t[e]&&(this.conf[e]=t[e]);if(null!=this.conf.gutterX&&null!=this.conf.gutterY||(this.conf.gutterX=this.conf.gutterY=this.conf.gutter),this._currentGutterX=this.conf.gutterX,this._currentGutterY=this.conf.gutterY,this._container="object"==typeof this.conf.container&&this.conf.container.nodeName?this.conf.container:document.querySelector(this.conf.container),!this._container)throw new Error("Container not found or missing");var n=this.resizeThrottler.bind(this);window.addEventListener("resize",n),this._removeListener=function(){window.removeEventListener("resize",n),null!=this._resizeTimeout&&(window.clearTimeout(this._resizeTimeout),this._resizeTimeout=null)},this.layout()},t.prototype.reset=function(){this._sizes=[],this._columns=[],this._count=null,this._width=this._container.clientWidth;var t=this.conf.baseWidth;this._width<t&&(this._width=t,this._container.style.minWidth=t+"px"),1==this.getCount()?(this._currentGutterX=this.conf.ultimateGutter,this._count=1):this._width<this.conf.baseWidth+2*this._currentGutterX?this._currentGutterX=0:this._currentGutterX=this.conf.gutterX},t.prototype.getCount=function(){return this.conf.surroundingGutter?Math.floor((this._width-this._currentGutterX)/(this.conf.baseWidth+this._currentGutterX)):Math.floor((this._width+this._currentGutterX)/(this.conf.baseWidth+this._currentGutterX))},t.prototype.computeWidth=function(){var t;return t=this.conf.surroundingGutter?(this._width-this._currentGutterX)/this._count-this._currentGutterX:(this._width+this._currentGutterX)/this._count-this._currentGutterX,t=Number.parseFloat(t.toFixed(2))},t.prototype.layout=function(){if(this._container){this.reset(),null==this._count&&(this._count=this.getCount());for(var t=this.computeWidth(),e=0;e<this._count;e++)this._columns[e]=0;for(var n,i=this._container.children,r=0;r<i.length;r++)i[r].style.width=t+"px",this._sizes[r]=i[r].clientHeight;if(n="ltr"==this.conf.direction?this.conf.surroundingGutter?this._currentGutterX:0:this._width-(this.conf.surroundingGutter?this._currentGutterX:0),this._count>this._sizes.length){var o=this._sizes.length*(t+this._currentGutterX)-this._currentGutterX;!1===this.conf.wedge?n="ltr"==this.conf.direction?(this._width-o)/2:this._width-(this._width-o)/2:"ltr"==this.conf.direction||(n=this._width-this._currentGutterX)}for(var s=0;s<i.length;s++){var a,u=this.conf.minify?this.getShortest():this.getNextColumn(s),l=0;(this.conf.surroundingGutter||u!=this._columns.length)&&(l=this._currentGutterX),a="ltr"==this.conf.direction?n+(t+l)*u:n-(t+l)*u-t;var c=this._columns[u];i[s].style.transform="translate3d("+Math.round(a)+"px,"+Math.round(c)+"px,0)",this._columns[u]+=this._sizes[s]+(this._count>1?this.conf.gutterY:this.conf.ultimateGutter)}this._container.style.height=this._columns[this.getLongest()]-this._currentGutterY+"px"}else console.error("Container not found")},t.prototype.getNextColumn=function(t){return t%this._columns.length},t.prototype.getShortest=function(){for(var t=0,e=0;e<this._count;e++)this._columns[e]<this._columns[t]&&(t=e);return t},t.prototype.getLongest=function(){for(var t=0,e=0;e<this._count;e++)this._columns[e]>this._columns[t]&&(t=e);return t},t.prototype.resizeThrottler=function(){this._resizeTimeout||(this._resizeTimeout=setTimeout(function(){this._resizeTimeout=null,this._container.clientWidth!=this._width&&this.layout()}.bind(this),33))},t.prototype.destroy=function(){"function"==typeof this._removeListener&&this._removeListener();for(var t=this._container.children,e=0;e<t.length;e++)t[e].style.removeProperty("width"),t[e].style.removeProperty("transform");this._container.style.removeProperty("height"),this._container.style.removeProperty("min-width")};var e=n(8434),i=n(5315),r=n.n(i);function o(){new t({container:".blog-articles",gutter:16,basewidth:294}).layout()}function s(){var t=document.querySelector("#swup").dataset.tag;"all"!=t?(document.querySelector(".shopify-section.image_banner")&&document.querySelector(".shopify-section.image_banner").classList.add("visually-hidden"),document.querySelector(".blog_intro")&&document.querySelector(".blog_intro").classList.add("visually-hidden"),document.body.classList.contains("white_logo")&&(document.body.classList.remove("white_logo"),document.body.classList.add("white_logo_hidden"))):(document.querySelector(".shopify-section.image_banner")&&document.querySelector(".shopify-section.image_banner").classList.remove("visually-hidden"),document.querySelector(".blog_intro")&&document.querySelector(".blog_intro").classList.remove("visually-hidden"),document.body.classList.contains("white_logo_hidden")&&(document.body.classList.add("white_logo"),document.body.classList.remove("white_logo_hidden"))),document.querySelectorAll(".article_tags a").forEach((function(e){e.dataset.tag==t?e.classList.add("active"):e.classList.remove("active")}))}new e.A({linkSelector:"a.taglink",plugins:[new(r())]}).on("contentReplaced",(function(){o(),s()})),document.addEventListener("DOMContentLoaded",(function(){o(),s()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,